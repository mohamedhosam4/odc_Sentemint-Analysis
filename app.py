import streamlit as st
import pickle
import nltk
import gdown
import os
import helper
import numpy as np

# ุชุญููู ุงูููุงุฑุฏ ุงููุงุฒูุฉ ูู NLTK
try:  
    nltk.data.find('tokenizers/punkt')
except LookupError:
    nltk.download('punkt', quiet=True)

nltk.download('stopwords', quiet=True)

# ุฑูุงุจุท ุงูููุงุฐุฌ ุนูู Google Drive (ูู ุจุชุนุฏูู ุงูุฑูุงุจุท ุฅูู ุงูุฑูุงุจุท ุงูุฎุงุตุฉ ุจู)
MODEL_URLS = {
    "Logistic Regression": "https://drive.google.com/uc?id=1887AgoAPiU5QxcjAt6WJVC0sXfIbMXl1",
    "SVM": "https://drive.google.com/uc?id=17Y3eoOCUeEaN1CpIMCz3dFuslhafuJWK",
    "Decision Tree": "https://drive.google.com/uc?id=11WV6qGw2KTGDoEzOY_C9oBdBAQi--MH7"
}

@st.cache_resource
def load_model(model_name):
    """ุชุญููู ุงููููุฐุฌ ูู Google Drive ูุฑุฉ ูุงุญุฏุฉ ููุท."""
    model_path = f"{model_name}.pkl"

    # ุชุญููู ุงููููุฐุฌ ุฅุฐุง ูู ููู ููุฌูุฏุงู
    if not os.path.exists(model_path):
        gdown.download(MODEL_URLS[model_name], model_path, quiet=False)

    # ุชุญููู ุงููููุฐุฌ ูู ุงูููู
    return pickle.load(open(model_path, 'rb'))

# ุงูุณูุงุญ ูููุณุชุฎุฏู ุจุงุฎุชูุงุฑ ุงููููุฐุฌ ุงูุฐู ููุฏ ุงุณุชุฎุฏุงูู
model_choice = st.selectbox("Select the model you want to use:", list(MODEL_URLS.keys()))

# ุชุญููู ุงููููุฐุฌ ุงููุฎุชุงุฑ (ูุฎุจุฃ)
model = load_model(model_choice)

# ุฅุฏุฎุงู ุงููุต ูู ุงููุณุชุฎุฏู
text = st.text_input("Enter your review:")

# ูุนุงูุฌุฉ ุงููุต ุงููุฏุฎู
if text:
    try:
        # ูุนุงูุฌุฉ ุงููุต ุจุงุณุชุฎุฏุงู ุงูุฏุงูุฉ ูู helper.py
        processed_text = helper.text_preprocessing(text)

        # ุชุญููู processed_text ุฅูู ุงูุดูู ุงูููุงุณุจ (ูุฌุจ ุฃู ูููู ูุตูููุฉ ูู ุงููุชุบูุฑุงุช)
        # ุนูู ุณุจูู ุงููุซุงูุ ุฅุฐุง ููุช ุชุณุชุฎุฏู CountVectorizer ุฃู TfidfVectorizer ูุฌุจ ุฃู ูููู ูุฏูู ูุฐู ุงูุนูููุฉ
        # ููุง ููุชุฑุถ ุฃูู ูุฌุจ ุนููู ุชุญููู ุงููุต ุฅูู ูุตูููุฉ ุจุนุฏ ุงููุนุงูุฌุฉ
        processed_text = np.array([processed_text])

        # ุงูุชูุจุค ุจุงุณุชุฎุฏุงู ุงููููุฐุฌ
        if st.button("Predict"):
            pred = model.predict(processed_text)[0]

            # ุนุฑุถ ุงูุฑุณุงูุฉ ุงูููุงุณุจุฉ ุจูุงุกู ุนูู ุงูุชูุจุค
            if pred == 1:
                st.success("The review is Positive! ๐")
            else:
                st.error("The review is Negative! ๐")

    except Exception as e:
        st.error(f"Error processing text: {e}")
